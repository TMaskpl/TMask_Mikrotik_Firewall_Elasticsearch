import subprocess
import json
import requests
import time
import xml.etree.ElementTree as ET

# Ustawienia Elasticsearch
ES_HOST = "http://localhost:9200"
ES_INDEX = "windows-logs"

# Funkcja do odczytu logów z Windows Event Log za pomocą wevtutil
def read_windows_logs(log_name="System"):
    """
    Odczytuje logi z Windows Event Log za pomocą narzędzia wevtutil i zwraca je w formacie JSON.
    """
    cmd = ["wevtutil", "qe", log_name, "/format:xml", "/c:10"]  # Pobiera ostatnie 10 zdarzeń w formacie XML
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    if process.returncode != 0:
        print(f"Błąd podczas odczytu logów za pomocą wevtutil: {stderr.decode('utf-8')}")
        return []

    # Parsowanie logów XML na strukturę JSON
    logs = []
    root = ET.fromstring(stdout.decode("utf-8"))
    for event in root.findall("./Event"):
        log_entry = {}
        for field in event.iter():
            log_entry[field.tag] = field.text
        logs.append(log_entry)

    return logs

# Funkcja do przesyłania logów do Elasticsearch
def send_to_elasticsearch(log_data):
    """
    Wysyła pojedynczy log w formacie JSON do Elasticsearch.
    """
    response = requests.post(
        f"{ES_HOST}/{ES_INDEX}/_doc",
        headers={"Content-Type": "application/json"},
        data=json.dumps(log_data),
    )
    if response.status_code != 201:
        print(f"Błąd podczas przesyłania logów: {response.status_code} - {response.text}")

if __name__ == "__main__":
    log_name = "System"  # Nazwa dziennika zdarzeń Windows (np. System, Application, Security)

    while True:
        logs = read_windows_logs(log_name)

        for log in logs:
            send_to_elasticsearch(log)

        # Oczekuj 60 sekund przed kolejnym odczytem logów
        time.sleep(60)
