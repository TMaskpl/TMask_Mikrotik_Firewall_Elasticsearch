import subprocess
import json
import requests
import xml.etree.ElementTree as ET

# Ustawienia Elasticsearch
ES_HOST = "http://localhost:9200"
ES_INDEX = "windows-logs"

# Funkcja do przesyłania logów do Elasticsearch
def send_to_elasticsearch(log_data):
    """
    Wysyła pojedynczy log w formacie JSON do Elasticsearch.
    """
    response = requests.post(
        f"{ES_HOST}/{ES_INDEX}/_doc",
        headers={"Content-Type": "application/json"},
        data=json.dumps(log_data),
    )
    if response.status_code != 201:
        print(f"Błąd podczas przesyłania logów: {response.status_code} - {response.text}")

# Funkcja do odczytu i przetwarzania logów w czasie rzeczywistym
def stream_windows_logs(log_name="System"):
    """
    Strumieniuje logi z Windows Event Log w czasie rzeczywistym za pomocą wevtutil.
    """
    cmd = ["wevtutil", "qe", log_name, "/format:xml", "/rd:true"]  # Czytaj logi w odwrotnym kierunku (od najnowszych)
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    buffer = ""
    for line in process.stdout:
        line = line.strip()
        if not line:
            continue

        # Dodawaj linie do bufora XML
        buffer += line

        # Jeśli linia kończy zdarzenie XML (</Event>), parsuj je
        if line.endswith("</Event>"):
            try:
                event = ET.fromstring(buffer)
                log_entry = {}
                # Parsuj pola główne zdarzenia
                for field in event.iter():
                    if field.tag == "EventData":
                        # Jeśli pole EventData istnieje, przetwarzaj je jako klucz-wartość
                        event_data = {}
                        for data in field:
                            if data.attrib.get("Name"):
                                event_data[data.attrib["Name"]] = data.text
                        log_entry["EventData"] = event_data
                    else:
                        log_entry[field.tag] = field.text

                send_to_elasticsearch(log_entry)  # Wyślij do Elasticsearch
            except ET.ParseError as e:
                print(f"Błąd parsowania zdarzenia: {e}")
            finally:
                buffer = ""  # Wyczyszczenie bufora po przetworzeniu jednego zdarzenia

if __name__ == "__main__":
    log_name = "System"  # Nazwa dziennika zdarzeń Windows (np. System, Application, Security)

    try:
        print(f"Rozpoczynam strumieniowanie logów z dziennika '{log_name}'...")
        stream_windows_logs(log_name)
    except KeyboardInterrupt:
        print("Przerwanie strumieniowania logów.")
