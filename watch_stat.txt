pipeline {
    agent any
    
    triggers {
        // Uruchamianie co 10 minut
        cron('*/10 * * * *')
    }
    
    options {
        // Dodawanie timestamp do log√≥w
        timestamps()
        // Opcjonalnie: timeout dla ca≈Çego pipeline
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('Run Ansible Tower Playbook') {
    steps {
        script {
            def maxRetries = 3
            def retryCount = 0
            def success = false
            
            while (retryCount < maxRetries && !success) {
                try {
                    echo "Pr√≥ba ${retryCount + 1}/${maxRetries}: Uruchamianie playbook w Ansible Tower..."
                    
                    // Uruchomienie playbook w Ansible Tower
                    def output = sh(
                        script: """
                            # Przyk≈Çad wywo≈Çania API Ansible Tower/AWX
                            curl -k -X POST \\
                                -H "Authorization: Bearer \${ANSIBLE_TOWER_TOKEN}" \\
                                -H "Content-Type: application/json" \\
                                -d '{"extra_vars": {}}' \\
                                https://your-tower-url/api/v2/job_templates/YOUR_TEMPLATE_ID/launch/
                            
                            # Alternatywnie, je≈õli u≈ºywasz tower-cli:
                            # tower-cli job launch --job-template="Your Playbook Template" --monitor --wait
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Parsowanie JENKINS_EXPORT output
                    def lCount = null
                    output.split('\n').each { line ->
                        if (line.contains('l_count:')) {
                            def match = line =~ /l_count:\s*"([^"]+)"/
                            if (match) {
                                lCount = match[0][1].trim()
                            }
                        }
                    }
                    
                    echo "Otrzymany l_count: ${lCount}"
                    
                    if (lCount == "0") {
                        echo "‚úÖ Playbook wykonany pomy≈õlnie!"
                        success = true
                        currentBuild.result = 'SUCCESS'
                        
                        // Wys≈Çanie metryki sukcesu do Pushgateway
                        sendMetricToPushgateway(0)
                        
                    } else {
                        retryCount++
                        if (retryCount < maxRetries) {
                            echo "‚ùå l_count = ${lCount} (oczekiwano 0). Oczekiwanie 1 minuty przed kolejnƒÖ pr√≥bƒÖ..."
                            sleep(time: 1, unit: 'MINUTES')
                        } else {
                            echo "‚ùå Wszystkie pr√≥by wyczerpane. Ostatni l_count: ${lCount}"
                            currentBuild.result = 'FAILURE'
                            
                            // Wys≈Çanie metryki b≈Çƒôdu do Pushgateway
                            sendMetricToPushgateway(1)
                            
                            error("Ansible Tower playbook zwr√≥ci≈Ç l_count != 0 po ${maxRetries} pr√≥bach")
                        }
                    }
                    
                } catch (Exception e) {
                    retryCount++
                    if (retryCount < maxRetries) {
                        echo "‚ùå B≈ÇƒÖd podczas wykonywania: ${e.getMessage()}. Oczekiwanie 1 minuty przed kolejnƒÖ pr√≥bƒÖ..."
                        sleep(time: 1, unit: 'MINUTES')
                    } else {
                        echo "‚ùå Wszystkie pr√≥by wyczerpane. Ostatni b≈ÇƒÖd: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                                                    error("Ansible Tower playbook zwr√≥ci≈Ç l_count != 0 po ${maxRetries} pr√≥bach")
                    }
                }
            }
        }
    }
    
    // Funkcja do wysy≈Çania metryki do Pushgateway
    def sendMetricToPushgateway(value) {
        try {
            def jobName = env.JOB_NAME.replaceAll('/', '_')
            def metricName = "ansible_playbook_status"
            def pushgatewayUrl = "http://pushgateway:9091"
            
            def metricData = "${metricName}{job=\"${jobName}\",instance=\"jenkins\"} ${value}"
            
            def connection = new URL("${pushgatewayUrl}/metrics/job/${jobName}/instance/jenkins").openConnection()
            connection.setRequestMethod("POST")
            connection.setRequestProperty("Content-Type", "text/plain")
            connection.setDoOutput(true)
            
            connection.getOutputStream().write(metricData.getBytes("UTF-8"))
            
            def responseCode = connection.getResponseCode()
            if (responseCode == 200 || responseCode == 202) {
                echo "üìä Metryka wys≈Çana do Pushgateway: ${metricName}=${value}"
            } else {
                echo "‚ö†Ô∏è Pushgateway odpowiedzia≈Ç kodem: ${responseCode}"
            }
            
        } catch (Exception e) {
            echo "‚ö†Ô∏è B≈ÇƒÖd podczas wysy≈Çania metryki do Pushgateway: ${e.getMessage()}"
            // Nie przerywamy pipeline'a z powodu b≈Çƒôdu metryki
        }
    }
}
}
